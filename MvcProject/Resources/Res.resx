<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="blockMenuHeader1" xml:space="preserve">
    <value>Header1</value>
  </data>
  <data name="blockMenuHeader2" xml:space="preserve">
    <value>Header2</value>
  </data>
  <data name="blockMenuHeader3" xml:space="preserve">
    <value>Header3</value>
  </data>
  <data name="blockMenuHeader4" xml:space="preserve">
    <value>Header4</value>
  </data>
  <data name="blockMenuHeader5" xml:space="preserve">
    <value>Header5</value>
  </data>
  <data name="blockMenuHeader6" xml:space="preserve">
    <value>Header6</value>
  </data>
  <data name="blockMenuParagraph1" xml:space="preserve">
    <value>Contrary to popular belief, Lorem Ipsum is not simply random tex</value>
  </data>
  <data name="blockMenuParagraph2" xml:space="preserve">
    <value>It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old</value>
  </data>
  <data name="blockMenuParagraph3" xml:space="preserve">
    <value>Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source</value>
  </data>
  <data name="blockMenuParagraph4" xml:space="preserve">
    <value>Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC</value>
  </data>
  <data name="blockMenuParagraph5" xml:space="preserve">
    <value>This book is a treatise on the theory of ethics, very popular during the Renaissance</value>
  </data>
  <data name="blockMenuParagraph6" xml:space="preserve">
    <value>The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32</value>
  </data>
  <data name="carouselHeaderTxt1" xml:space="preserve">
    <value>is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s</value>
  </data>
  <data name="carouselHeaderTxt2" xml:space="preserve">
    <value>when an unknown printer took a galley of type and scrambled it to make a type specimen book</value>
  </data>
  <data name="carouselHeaderTxt3" xml:space="preserve">
    <value>t has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged</value>
  </data>
  <data name="carouselpTxt1" xml:space="preserve">
    <value>as opposed to using 'Content here, content here', making it look like readable English</value>
  </data>
  <data name="carouselpTxt2" xml:space="preserve">
    <value>he point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters</value>
  </data>
  <data name="carouselpTxt3" xml:space="preserve">
    <value>t is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout</value>
  </data>
  <data name="More" xml:space="preserve">
    <value>More</value>
  </data>
  <data name="navMenuItem1" xml:space="preserve">
    <value>Menu1</value>
  </data>
  <data name="navMenuItem2" xml:space="preserve">
    <value>Menu2</value>
  </data>
  <data name="navMenuItem3" xml:space="preserve">
    <value>Menu3</value>
  </data>
  <data name="navMenuItem4" xml:space="preserve">
    <value>Menu4</value>
  </data>
  <data name="text1" xml:space="preserve">
    <value>this is text 1</value>
  </data>
  <data name="txtSearch" xml:space="preserve">
    <value>Search</value>
  </data>
</root>